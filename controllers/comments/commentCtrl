const Post = require("../../model/Post/Post");
const User = require("../../model/User/User");
const Comment = require("../../model/Comment/Comments");
const { appErr } = require("../../utils/appErr");

const createCmmntCtrl = async (req, res, next) => {
  const { description } = req.body;
  try {
    // Find the post
    const post = await Post.findById(req.params.id);
    if (!post) {
      return next(appErr('Post not found'));
    }

    // Create the comment
    const comment = await Comment.create({
      post: post._id,
      description,
      user: req.userAuth,
    });

    // Push the comment to the post
    post.comments.push(comment._id);
    await post.save({ validateBeforeSave: false });

    // Find the user and push the comment to user (optional)
    const user = await User.findById(req.userAuth);
    if (user) {
      user.comments.push(comment._id);
      await user.save({ validateBeforeSave: false });
    }

    // Populate the user field in the comment
    const populatedComment = await Comment.findById(comment._id).populate('user').exec();

    // Check if the user is populated
    if (!populatedComment.user) {
      console.log('User not populated');
    } else {
      console.log('User populated successfully');
    }

    res.json({
      status: "success",
      data: populatedComment,
    });
  } catch (error) {
    console.error('Error:', error);
    next(appErr(error.message));
  }
};


const deleteCmmntCtrl = async (req, res, next) => {
    try {
        //find the Comment
        const comment = await Comment.findById(req.params.id);
        if (comment.user.toString() !== req.userAuth.toString()) {
          return next(appErr("You are not allowed to update this comment", 403));
        }
        await Comment.findByIdAndDelete(req.params.id);
        res.json({
          status: "success",
          data: "Comment has been deleted successfully",
        });
      } catch (error) {
        next(appErr(error.message));
      }
}

const updateCmmntCtrl = async (req, res, next) => {
  const { description } = req.body;
  try {
    // Find the Comment
    const comment = await Comment.findById(req.params.id);
    if (comment.user.toString() !== req.userAuth.toString()) {
      return next(appErr("You are not allowed to update this comment", 403));
    }

    // Update the Comment
    const updatedComment = await Comment.findByIdAndUpdate(
      req.params.id,
      { description },
      { new: true, runValidators: true }
    ).populate('user').exec(); // Populating the user field

    res.json({
      status: "success",
      data: updatedComment,
    });
  } catch (error) {
    next(appErr(error.message));
  }
}


const getCmmntByIdCtrl = async (req, res, next) => {
  try {
    // Find the comment by ID
    const comment = await Comment.findById(req.params.id);

    // If the comment doesn't exist
    if (!comment) {
      return next(appErr("Comment not found", 404));
    }

    res.json({
      status: "success",
      data: comment,
    });
  } catch (error) {
    next(appErr(error.message));
  }
};

module.exports = {
    createCmmntCtrl,
    deleteCmmntCtrl,
    updateCmmntCtrl,
    getCmmntByIdCtrl
}